(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{246:function(t,s,e){"use strict";e.r(s);var a=e(6),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"fiber"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fiber"}},[t._v("#")]),t._v(" Fiber")]),t._v(" "),e("p",[t._v("React16的Reconciler内部采用了Fiber架构。被称为Fiber Reconciler。")]),t._v(" "),e("p",[t._v("Fiber有三层含义：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("作为架构来说，在React15中，Reconciler采用递归的方式，数据保存在递归的调用栈中，所以被称为stack Reconciler。React16中的协调器是基于Fiber节点实现的，所以被称为Fiber Reconciler")])]),t._v(" "),e("li",[e("p",[t._v("作为静态数据来说，每个RootFiber节点对应一个组件，保存了该组件对应的类型、dom节点等信息，这时的Fiber节点就称为虚拟DOM，JSX中的每一个节点都被称为Fiber节点，Fiber节点的类型有：")])])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Function Component")])]),t._v(" "),e("li",[t._v("原生DOM节点对应的Fiber节点称为"),e("code",[t._v("HostComponent")])]),t._v(" "),e("li",[t._v("文本对应的Fiber节点称为文本Fiber节点")])]),t._v(" "),e("p",[t._v("这些Fiber节点之间通过child、sibling、return等属性连接")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("作为动态的工作单元来说，Fiber节点保存了组件更新的状态以及需要执行的副作用")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fiber节点的数据结构  react-reconciler/src/ReactFiber.js")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// =========================作为静态数据start=========================")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 组件对应的类型")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elementType "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 大部分情况下与type相同")]),t._v("\n  \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于函数组件来说 是函数本身；对于class组件来说，是class，")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于HostComponent来说，是DOM节点的tagName")]),t._v("\n  \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// =========================作为静态数据end=========================")]),t._v("\n\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ==========================Fiber 作为架构来说start=========================")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return、child、sibling会将Fiber节点连接组成一棵Fiber树")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代表插入DOM的索引")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// =========================Fiber 作为架构来说end=========================")]),t._v("\n  \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作为动态的工作单元来使用=====start")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其中名称中带有effect的，代表副作用相关")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于HostComponent，副作用包括DOM节点的增删查改")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于function component，副作用代表我们使用的useEffect和useLayoutEffect")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingProps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pendingProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedProps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("contextDependencies "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Effects")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoEffect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expirationTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoWork"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childExpirationTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoWork"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// =========================作为动态的工作单元来使用end=========================")]),t._v("\n")])])]),e("hr"),t._v(" "),e("h3",{attrs:{id:"fiber架构的工作原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fiber架构的工作原理"}},[t._v("#")]),t._v(" Fiber架构的工作原理")]),t._v(" "),e("p",[t._v("Fiber架构采用一种双缓存的工作机制：在内存中构建当前帧，替换上一帧的技术被称为双缓存")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("首屏渲染前\n当首次调用"),e("code",[t._v("ReactDOM.render")]),t._v("时，会创建整个应用的根节点"),e("code",[t._v("FiberRootNode")]),t._v("，每次调用"),e("code",[t._v("ReactDOM.render")]),t._v("时，都会创建当前应用的根节点"),e("code",[t._v("RootFiber")]),t._v("，并且"),e("code",[t._v("FiberRootNode")]),t._v("的"),e("code",[t._v("current")]),t._v("指向"),e("code",[t._v("RootFiber")]),t._v("，由于在首屏渲染之前，页面是空白的，所以"),e("code",[t._v("RootFiber")]),t._v("没有子节点")])]),t._v(" "),e("li",[e("p",[t._v("首屏渲染\n不管是首屏渲染，还是调用"),e("code",[t._v("this.setState")]),t._v("、"),e("code",[t._v("useState")]),t._v("、"),e("code",[t._v("update")]),t._v("创建的更新，都会从根节点开始创建一棵Fiber树。在两棵Fiber树（current fiber树和workInProgress树）之间，都存在的fiber节点会通过"),e("code",[t._v("alternate")]),t._v("属性连接，方便两个fiber节点之间共用一些的属性。")])])]),t._v(" "),e("p",[t._v("接下来采用深度优先遍历的方式模拟递归，创建整棵Fiber树")]),t._v(" "),e("ul",[e("li",[t._v("流程1：刚刚创建完workInProgress Fiber树，此时内存中存在两棵Fiber树，两棵Fiber树之间都存在的fiber节点通过"),e("code",[t._v("alternate")]),t._v("属性连接")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/superwtt/MyFileRepository/main/image/React/%E9%A6%96%E5%B1%8F%E6%B8%B2%E6%9F%93%E6%97%B6.png",alt:""}})]),t._v(" "),e("hr"),t._v(" "),e("ul",[e("li",[t._v("流程2：此时current指针指向了workInProgress Fiber树，workInProgress Fiber树就变成了current Fiber树。每个fiber节点之间通过"),e("code",[t._v("child")]),t._v("、"),e("code",[t._v("siblings")]),t._v("、"),e("code",[t._v("return")]),t._v("属性连接。")])]),t._v(" "),e("p",[t._v("代表页面内容的Fiber树称为current Fiber树，由于触发更新创建的Fiber树称为workInProgress Fiber树")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/superwtt/MyFileRepository/main/image/React/%E9%A6%96%E5%B1%8F%E6%B8%B2%E6%9F%932.png",alt:""}})]),t._v(" "),e("hr"),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("更新时\n每次触发更新，都会重新创建一棵workInProgress树，此时current Fiber树上的节点"),e("code",[t._v("current RootFiber")]),t._v(" 已经有"),e("code",[t._v("alternate")]),t._v("属性已经指向了一个"),e("code",[t._v("RootFiber")]),t._v("，所以在创建"),e("code",[t._v("workInProgress Fiber")]),t._v("时，会基于这个"),e("code",[t._v("RootFiber")]),t._v("来创建。")])]),t._v(" "),e("p",[t._v("在本次更新中，除了"),e("code",[t._v("RootFiber")]),t._v("，App与p节点都有对应的"),e("code",[t._v("current fiber")]),t._v("存在，这种将"),e("code",[t._v("current fiber")]),t._v("与本次更新返回的JSX作对比，生成"),e("code",[t._v("workInProgress")]),t._v("的过程，就叫做diff算法。所以首屏渲染与更新最大的区别就在于，在更新的过程中，是否有diff算法")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/superwtt/MyFileRepository/main/image/React/%E6%9B%B4%E6%96%B0%E6%97%B6.png",alt:""}})])])}),[],!1,null,null,null);s.default=r.exports}}]);