(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{235:function(t,e,r){"use strict";r.r(e);var s=r(6),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h3",{attrs:{id:"调和过程的两个阶段"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#调和过程的两个阶段"}},[t._v("#")]),t._v(" 调和过程的两个阶段")]),t._v(" "),r("p",[t._v("React的调和过程分为两个阶段："),r("code",[t._v("RenderRoot")]),t._v("和"),r("code",[t._v("CompleteRoot")]),t._v("。第一个阶段又称为render阶段，主线是构建workInProgress Fiber节点树，准备好线性任务链effect list。在这个阶段的最后，workInProgress Fiber tree会变为finishedWork fiber tree，以finishedWork属性挂载到FiberRoot对象里，供第二个阶段使用，第二个阶段又称为commit阶段，主要目标是根据线性任务链完成finishedWork Fiber节点树中记录的任务，实现UI的更新")]),t._v(" "),r("p",[t._v("1.Render阶段（renderRoot）")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("render阶段以一个fiber节点为单元，采用递归的方式，实现workInProgress树的快速搭建。搭建过程中还会实现如下功能：")]),t._v(" "),r("ul",[r("li",[t._v("更新state和props")]),t._v(" "),r("li",[t._v("调用部分生命周期函数")]),t._v(" "),r("li",[t._v("新旧children diff，标记更新")]),t._v(" "),r("li",[t._v("找出DOM需要更新的属性，并标记更新")]),t._v(" "),r("li",[t._v("预生成新增的DOM对象，先挂载在fiber上")])])]),t._v(" "),r("li",[r("p",[t._v("如何将fiber节点搭建成fiber树：源码中从RootFiber开始递归流程，“递”和“归”阶段会交错执行直到“归”到RootFiber，至此，render阶段的工作就结束了")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("“递”")]),t._v(" "),r("ul",[r("li",[t._v("首先从rootFiber开始向下深度优先遍历，为遍历到的每个fiber节点调用beginWork方法")]),t._v(" "),r("li",[t._v("该方法根据传入的fiber节点创建子fiber节点，并将这两个fiber节点连接起来")]),t._v(" "),r("li",[t._v("当遍历到叶子节点（即没有子组件的组件）时就进入“归”的阶段")])])]),t._v(" "),r("li",[r("p",[t._v("“归”")]),t._v(" "),r("ul",[r("li",[t._v("在这个阶段会调用completeWork处理fiber节点")]),t._v(" "),r("li",[t._v("当某个fiber节点执行完completeWork，如果其存在兄弟fiber节点，即"),r("code",[t._v("fiber.sibling!==null")]),t._v("，会进入其兄弟的“递”阶段")]),t._v(" "),r("li",[t._v("如果不存在兄弟fiber，会进入父fiber的“归阶段”")])])])])]),t._v(" "),r("li",[r("p",[t._v("举例")])])]),t._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("App")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n     "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n       i am\n       "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("span"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("KaSong"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("span"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n     "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nReactDOM"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("App "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" document"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"root"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),r("p",[t._v("对应的Fiber树结构如下：\n"),r("img",{attrs:{src:"https://raw.githubusercontent.com/superwtt/MyFileRepository/main/image/React/fiber%E6%A0%91.png",alt:""}})]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("2.Commit阶段（CompleteRoot）\n这个阶段相比第一个阶段，任务很轻，就是遍历effect list，执行side effects，将数据的更新体现到UI上，这个阶段会涉及UI的更新")]),t._v(" "),r("ul",[r("li",[t._v("执行所有的effect list节点的生命周期函数getSnapshotBeforeUpdate")]),t._v(" "),r("li",[t._v("执行所有的effect list节点DOM更新、ref删除，以及componentWillUnMount生命周期函数的调用")]),t._v(" "),r("li",[t._v("将workFinished tree设置为current tree")]),t._v(" "),r("li",[t._v("执行所有的effect list节点的mutation生命周期函数，ref的添加")])]),t._v(" "),r("hr"),t._v(" "),r("h3",{attrs:{id:"参考链接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/hupian1989/article/details/102617165",target:"_blank",rel:"noopener noreferrer"}},[t._v("调和流程"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://react.iamkasong.com/process/beginWork.html#effecttag",target:"_blank",rel:"noopener noreferrer"}},[t._v("卡颂"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://react.jokcy.me/book/commit-phase/host-effects/CommitWork.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("jokcy老师关于渲染流程的分析"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);